from typing import Optional, List
from collections import deque


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        '''This leads to TLE
        def findNext():
            nonlocal count, stack, visited
            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    if int(grid[i][j]) == 1 and visited[i][j] == 0:
                        count += 1
                        stack.append([i, j])
                        visited[i][j] = 1
                        return True
            return False
        '''

        stack = deque()
        visited = [[0] * len(grid[0]) for t in range(len(grid))]
        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if int(grid[i][j]) == 1 and visited[i][j] == 0:
                    count += 1
                    stack.append([i, j])
                    visited[i][j] = 1
                while stack:
                    q = stack.pop()
                    newi, newj = q[0], q[1]
                    for d in directions:
                        c, r = newi + d[0], newj + d[1]
                        if 0 <= c < len(grid) and 0 <= r < len(grid[0]):
                            if int(grid[c][r]) == 1 and visited[c][r] == 0:
                                stack.append([c, r])
                                visited[c][r] = 1
        return count


if __name__ == '__main__':
    sol = Solution()
    toPrint = sol.numIslands([["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]])
    print(toPrint)
